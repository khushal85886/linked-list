package linkedList;
import java.util.Scanner;

public class MergeSort {
	
	int data;
	MergeSort next;
	public MergeSort(int data) {
	
		this.data=data;
		next=null;
	}
	
	public static MergeSort takeInput()
	{
		Scanner s = new Scanner(System.in);
		MergeSort head =null;
		MergeSort tail= null;
		System.out.println("Enter the data in the list and then press -1 :  ");
		int data = s.nextInt();
		
		while(data!=-1)
		{
			MergeSort newNode = new MergeSort(data);
			
			if(head==null)
			{
				head = newNode;
				tail=newNode;
			}
			
			tail.next=newNode;
			tail=tail.next;
			
			data=s.nextInt();
		}
		return head;
	}
	
	public static MergeSort midNode(MergeSort head)
	{
			MergeSort fast=head;
			MergeSort slow=head;
			
			while(fast!=null && fast.next!=null)
			{
				slow=slow.next;
				fast=fast.next.next;
			}
			return slow;
	}
	
    public static MergeSort mergeSort(MergeSort head)
    {
        if (head.next == null)
            return head;
 
        MergeSort mid = midNode(head);
        MergeSort head2 = mid.next;
        mid.next = null;
        MergeSort newHead1 = mergeSort(head);
        MergeSort newHead2 = mergeSort(head2);
        MergeSort finalHead = merge(newHead1, newHead2);
 
        return finalHead;
    }
	
    static MergeSort merge(MergeSort head1, MergeSort head2)
    {
        MergeSort merged = new MergeSort(-1);
        MergeSort temp = merged;
       
        // While head1 is not null and head2
        // is not null
        while (head1 != null && head2 != null) {
            if (head1.data < head2.data) {
                temp.next = head1;
                head1 = head1.next;
            }
            else {
                temp.next = head2;
                head2 = head2.next;
            }
            temp = temp.next;
        }
       
        // While head1 is not null
        while (head1 != null) {
            temp.next = head1;
            head1 = head1.next;
            temp = temp.next;
        }
       
        // While head2 is not null
        while (head2 != null) {
            temp.next = head2;
            head2 = head2.next;
            temp = temp.next;
        }
        return merged.next;
    }
	
	public static void print(MergeSort head)
	{
		while(head!=null)
		{
			System.out.print(head.data + "  ");
			head=head.next;
		}
	}

	public static void main(String[] args) {

		MergeSort head = takeInput();
		
		head = mergeSort(head);
		
		print(head);
	}

}
